//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nomina2019.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BDNOMINA2019Entities : DbContext
    {
        public BDNOMINA2019Entities()
            : base("name=BDNOMINA2019Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblDepartamentos> tblDepartamentos { get; set; }
        public virtual DbSet<tblEmpleados> tblEmpleados { get; set; }
        public virtual DbSet<tblPadronPersonas> tblPadronPersonas { get; set; }
        public virtual DbSet<tblPeriodosPago> tblPeriodosPago { get; set; }
        public virtual DbSet<tblTabuladorSueldo> tblTabuladorSueldo { get; set; }
    
        public virtual ObjectResult<Nullable<int>> empleados_crud(Nullable<int> id, Nullable<int> idPadron, string cNombre, string cApellido1, string cApellido2, string cDireccion, string cTelefono, Nullable<int> idPeriodoPago, Nullable<int> idDepartamento, Nullable<decimal> dSueldoDiario, Nullable<int> validar)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idPadronParameter = idPadron.HasValue ?
                new ObjectParameter("IdPadron", idPadron) :
                new ObjectParameter("IdPadron", typeof(int));
    
            var cNombreParameter = cNombre != null ?
                new ObjectParameter("cNombre", cNombre) :
                new ObjectParameter("cNombre", typeof(string));
    
            var cApellido1Parameter = cApellido1 != null ?
                new ObjectParameter("cApellido1", cApellido1) :
                new ObjectParameter("cApellido1", typeof(string));
    
            var cApellido2Parameter = cApellido2 != null ?
                new ObjectParameter("cApellido2", cApellido2) :
                new ObjectParameter("cApellido2", typeof(string));
    
            var cDireccionParameter = cDireccion != null ?
                new ObjectParameter("cDireccion", cDireccion) :
                new ObjectParameter("cDireccion", typeof(string));
    
            var cTelefonoParameter = cTelefono != null ?
                new ObjectParameter("cTelefono", cTelefono) :
                new ObjectParameter("cTelefono", typeof(string));
    
            var idPeriodoPagoParameter = idPeriodoPago.HasValue ?
                new ObjectParameter("IdPeriodoPago", idPeriodoPago) :
                new ObjectParameter("IdPeriodoPago", typeof(int));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            var dSueldoDiarioParameter = dSueldoDiario.HasValue ?
                new ObjectParameter("dSueldoDiario", dSueldoDiario) :
                new ObjectParameter("dSueldoDiario", typeof(decimal));
    
            var validarParameter = validar.HasValue ?
                new ObjectParameter("Validar", validar) :
                new ObjectParameter("Validar", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("empleados_crud", idParameter, idPadronParameter, cNombreParameter, cApellido1Parameter, cApellido2Parameter, cDireccionParameter, cTelefonoParameter, idPeriodoPagoParameter, idDepartamentoParameter, dSueldoDiarioParameter, validarParameter);
        }
    }
}
